plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.ktb'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// implementation 'org.springframework.boot:spring-boot-starter-data-redis' // MVP 단계에서는 생략
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	// JWT 관련 의존성 추가
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// AWS S3 의존성
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// Discord 로깅
	implementation 'com.github.napstr:logback-discord-appender:1.0.0'

	// 기본 의존성
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	// 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// JUnit 5 의존성 (명시적 추가)
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// H2 데이터베이스 (테스트용)
	testRuntimeOnly 'com.h2database:h2'

	// AssertJ (더 나은 assertion)
	testImplementation 'org.assertj:assertj-core'

	// Mockito (Spring Boot에 포함되어 있지만 명시적 추가)
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'

	// Testcontainers (필요시 사용)
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
}

// JUnit 5 사용 설정
tasks.named('test') {
	useJUnitPlatform()

	// 테스트 시 더 자세한 로깅
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		showCauses true
		showExceptions true
		showStackTraces true
	}

	// 테스트 결과 보고서 설정
	reports {
		html.required = true
		junitXml.required = true
	}

	// 테스트 최대 힙 메모리 설정
	maxHeapSize = "1g"

	// 병렬 테스트 실행 (선택사항)
	systemProperty 'junit.jupiter.execution.parallel.enabled', true
	systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
}

// 테스트 태그별 실행을 위한 추가 태스크
task unitTest(type: Test) {
	useJUnitPlatform {
		includeTags 'unit'
	}
	testLogging {
		events "passed", "skipped", "failed"
	}
}

task integrationTest(type: Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
	testLogging {
		events "passed", "skipped", "failed"
	}
}